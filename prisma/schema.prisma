datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  username              String    @unique
  email                 String    @unique
  emailVerified         DateTime?
  emailVerificationCode String?
  emailVerificationExpiry DateTime?
  passwordResetToken    String?
  passwordResetExpiry   DateTime?
  image                 String?
  hashedPassword        String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accounts              Account[]
  sessions              Session[]
  products              Product[]
  sentMessages          Message[] @relation("MessageSender")
  receivedMessages      Message[] @relation("MessageReceiver")
  buyerChats            Chat[]    @relation("ChatBuyer")
  sellerChats           Chat[]    @relation("ChatSeller")
  sentOffers            Offer[]   @relation("OfferSender")
  receivedOffers        Offer[]   @relation("OfferReceiver")
  reviewsGiven          Review[]  @relation("ReviewAuthor")
  reviewsReceived       Review[]  @relation("ReviewSeller")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
}

model Product {
  id          String        @id @default(cuid())
  name        String
  price       Float
  description String        @db.Text
  status      String        @default("active")
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  chats       Chat[]

  @@index([userId])
  @@index([categoryId])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  order     Int      @default(0)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([productId])
}

model Chat {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyerId   String
  buyer     User     @relation("ChatBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId  String
  seller    User     @relation("ChatSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
  offers    Offer[]

  @@unique([productId, buyerId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver  User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([chatId])
  @@index([senderId])
  @@index([receiverId])
}

model Offer {
  id          String      @id @default(cuid())
  chatId      String
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId    String
  sender      User        @relation("OfferSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User        @relation("OfferReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  amount      Float
  status      OfferStatus @default(PENDING)
  message     String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  review      Review?     // Optional review for this offer

  @@index([chatId])
  @@index([senderId])
  @@index([receiverId])
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  authorId  String   // The reviewer (buyer)
  author    User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  sellerId  String   // The seller being reviewed
  seller    User     @relation("ReviewSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  offerId   String   @unique // The accepted offer that allows this review
  offer     Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId])
  @@index([authorId])
  @@index([offerId])
} 